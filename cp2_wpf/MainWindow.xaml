<!--
Copyright 2023 faddenSoft

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<Window x:Class="cp2_wpf.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:cp2_wpf"
        xmlns:common="clr-namespace:cp2_wpf.WPFCommon"
        mc:Ignorable="d"
        Title="CiderPress II"
        Width="1200" Height="800" MinWidth="640" MinHeight="680" ResizeMode="CanResizeWithGrip"
        SourceInitialized="Window_SourceInitialized"
        Loaded="Window_Loaded"
        LocationChanged="Window_LocationChanged"
        SizeChanged="Window_SizeChanged"
        Closing="Window_Closing">

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Res/TreeViewItemStyle.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <BooleanToVisibilityConverter x:Key="BoolToVis"/>

            <!-- don't center the ListView(GridView) column headers
            https://stackoverflow.com/q/44119146/294248
            (style without ID applies to all instances of that type)
            -->
            <!--<Style TargetType="{x:Type GridViewColumnHeader}">
                <Setter Property="HorizontalContentAlignment" Value="Left" />
            </Style>-->

            <!-- Style for the "type" string in the archive tree view.  There are three
            interesting states: not selected, selected, and selected but not focused.  The
            properties come from our ArchiveTreeItem class, which doesn't know about focus, so
            we need to peek at the ancestor object for that.
            The colors look good with the standard Win10 theme, but might be totally wrong for
            a "dark" theme.  TODO: adjust for that. -->
            <Style x:Key="archiveTreeTypeStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="Foreground" Value="Green"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsSelected}" Value="True">
                        <Setter Property="Foreground" Value="LightGreen"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}, Path=IsSelected}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}, Path=IsFocused}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Foreground" Value="DarkGreen"/>
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>

            <RoutedUICommand x:Key="AboutCmd" Text="_About CiderPress II"/>
            <RoutedUICommand x:Key="AddFilesCmd" Text="_Add Files..."/>
            <RoutedUICommand x:Key="CloseCmd" Text="_Close">
                <RoutedUICommand.InputGestures>
                    <KeyGesture>Ctrl+W</KeyGesture>
                </RoutedUICommand.InputGestures>
            </RoutedUICommand>
            <RoutedUICommand x:Key="CloseSubTreeCmd" Text="Close File Source">
                <RoutedUICommand.InputGestures>
                    <KeyGesture>Ctrl+Shift+W</KeyGesture>
                </RoutedUICommand.InputGestures>
            </RoutedUICommand>
            <RoutedUICommand x:Key="CreateDirectoryCmd" Text="Create Directory..."/>
            <RoutedUICommand x:Key="DefragmentCmd" Text="Defragment Filesystem"/>
            <!-- DataGrids eat Delete, TreeViews don't -->
            <RoutedUICommand x:Key="DeleteFilesCmd" Text="_Delete Files">
                <RoutedUICommand.InputGestures>
                    <KeyGesture>Delete</KeyGesture>
                </RoutedUICommand.InputGestures>
            </RoutedUICommand>
            <RoutedUICommand x:Key="EditAppSettingsCmd" Text="Settings..."/>
            <RoutedUICommand x:Key="EditAttributesCmd" Text="Edit Attributes..."/>
            <RoutedUICommand x:Key="EditBlocksCmd" Text="Edit Blocks..."/>
            <RoutedUICommand x:Key="EditBlocksCPMCmd" Text="Edit Blocks (CP/M)..."/>
            <RoutedUICommand x:Key="EditDirAttributesCmd" Text="Edit Directory Attributes..."/>
            <RoutedUICommand x:Key="EditSectorsCmd" Text="Edit Sectors..."/>
            <RoutedUICommand x:Key="ExitCmd" Text="E_xit"/>
            <RoutedUICommand x:Key="ExportFilesCmd" Text="E_xport Files..."/>
            <RoutedUICommand x:Key="ExtractFilesCmd" Text="_Extract Files...">
                <RoutedUICommand.InputGestures>
                    <KeyGesture>Ctrl+E</KeyGesture>
                </RoutedUICommand.InputGestures>
            </RoutedUICommand>
            <RoutedUICommand x:Key="ImportFilesCmd" Text="Import Files..."/>
            <RoutedUICommand x:Key="NavToParentCmd" Text="Go To Parent">
                <RoutedUICommand.InputGestures>
                    <!-- Ctrl+Up is taken by the standard controls (moves the scrollbar) -->
                    <KeyGesture>Alt+Up</KeyGesture>
                </RoutedUICommand.InputGestures>
            </RoutedUICommand>
            <RoutedUICommand x:Key="NavToParentDirCmd" Text="Go To Parent Directory"/>
            <RoutedUICommand x:Key="NewDiskImageCmd" Text="New _Disk Image...">
                <RoutedUICommand.InputGestures>
                    <KeyGesture>Ctrl+N</KeyGesture>
                </RoutedUICommand.InputGestures>
            </RoutedUICommand>
            <RoutedUICommand x:Key="NewFileArchiveCmd" Text="_New File Archive..."/>
            <RoutedUICommand x:Key="OpenPhysicalDriveCmd" Text="Open Physical Drive..."/>
            <RoutedUICommand x:Key="ReplacePartitionCmd" Text="Replace Partition Contents..."/>
            <RoutedUICommand x:Key="RecentFileCmd"/>
            <RoutedUICommand x:Key="ResetSortCmd" Text="Reset Sorting"/>
            <RoutedUICommand x:Key="SaveAsDiskImageCmd" Text="Save As Disk Image..."/>
            <RoutedUICommand x:Key="ScanForBadBlocksCmd" Text="Scan for Bad Blocks"/>
            <RoutedUICommand x:Key="ScanForSubVolCmd" Text="Scan for Sub-Volumes"/>
            <RoutedUICommand x:Key="ShowDirListCmd" Text="Show Directory List"/>
            <RoutedUICommand x:Key="ShowFullListCmd" Text="Show Full List"/>
            <RoutedUICommand x:Key="ShowInfoCmd" Text="Show Information"/>
            <RoutedUICommand x:Key="TestFilesCmd" Text="Test Files"/>
            <RoutedUICommand x:Key="ToggleInfoCmd" Text="Toggle Information">
                <RoutedUICommand.InputGestures>
                    <KeyGesture>Ctrl+I</KeyGesture>
                </RoutedUICommand.InputGestures>
            </RoutedUICommand>
            <RoutedUICommand x:Key="ViewFilesCmd" Text="_View Files"/>

            <RoutedUICommand x:Key="Debug_BulkCompressTestCmd" Text="Bulk Compression Test..."/>
            <RoutedUICommand x:Key="Debug_DiskArcLibTestCmd" Text="DiskArc Library Tests...">
                <RoutedUICommand.InputGestures>
                    <KeyGesture>Ctrl+Shift+T</KeyGesture>
                </RoutedUICommand.InputGestures>
            </RoutedUICommand>
            <RoutedUICommand x:Key="Debug_FileConvLibTestCmd" Text="FileConv Library Tests..."/>
            <RoutedUICommand x:Key="Debug_ShowDebugLogCmd" Text="Show Debug Log"/>
            <RoutedUICommand x:Key="Debug_ShowDropTargetCmd" Text="Show Drop/Paste Target"/>
        </ResourceDictionary>
    </Window.Resources>

    <Window.CommandBindings>
        <CommandBinding Command="{StaticResource AboutCmd}"
                        Executed="AboutCmd_Executed"/>
        <CommandBinding Command="{StaticResource AddFilesCmd}"
                        CanExecute="CanAddFiles" Executed="AddFilesCmd_Executed"/>
        <CommandBinding Command="{StaticResource CloseCmd}"
                        CanExecute="IsFileOpen" Executed="CloseCmd_Executed"/>
        <CommandBinding Command="{StaticResource CloseSubTreeCmd}"
                        CanExecute="IsSubTreeSelected" Executed="CloseSubTreeCmd_Executed"/>
        <!-- Copy is cloned in file list DataGrid declaration -->
        <CommandBinding Command="Copy"
                        CanExecute="AreFileEntriesSelected" Executed="CopyCmd_Executed"/>
        <CommandBinding Command="{StaticResource CreateDirectoryCmd}"
                        CanExecute="CanCreateDirectory" Executed="CreateDirectoryCmd_Executed"/>
        <!--<CommandBinding Command="Cut"
                        CanExecute="IsFileOpen" Executed="CutCmd_Executed"/>-->
        <CommandBinding Command="{StaticResource DefragmentCmd}"
                        CanExecute="CanDefragment" Executed="DefragmentCmd_Executed"/>
        <!-- DeleteFilesCmd is cloned in file list DataGrid declaration -->
        <CommandBinding Command="{StaticResource DeleteFilesCmd}"
                        CanExecute="CanDeleteFiles" Executed="DeleteFilesCmd_Executed"/>
        <CommandBinding Command="{StaticResource EditAppSettingsCmd}"
                        Executed="EditAppSettingsCmd_Executed"/>
        <CommandBinding Command="{StaticResource EditAttributesCmd}"
                        CanExecute="IsWritableSingleEntrySelected" Executed="EditAttributesCmd_Executed"/>
        <CommandBinding Command="{StaticResource EditBlocksCmd}"
                        CanExecute="CanEditBlocks" Executed="EditBlocksCmd_Executed"/>
        <CommandBinding Command="{StaticResource EditBlocksCPMCmd}"
                        CanExecute="CanEditBlocksCPM" Executed="EditBlocksCPMCmd_Executed"/>
        <CommandBinding Command="{StaticResource EditDirAttributesCmd}"
                        CanExecute="IsEditableFileSystemSelected" Executed="EditDirAttributesCmd_Executed"/>
        <CommandBinding Command="{StaticResource EditSectorsCmd}"
                        CanExecute="CanEditSectors" Executed="EditSectorsCmd_Executed"/>
        <CommandBinding Command="{StaticResource ExitCmd}"
                        Executed="ExitCmd_Executed"/>
        <CommandBinding Command="{StaticResource ExportFilesCmd}"
                        CanExecute="AreFileEntriesSelected" Executed="ExportFilesCmd_Executed"/>
        <CommandBinding Command="{StaticResource ExtractFilesCmd}"
                        CanExecute="AreFileEntriesSelected" Executed="ExtractFilesCmd_Executed"/>
        <CommandBinding Command="Find"
                        CanExecute="AreFileEntriesSelected" Executed="FindCmd_Executed"/>
        <CommandBinding Command="Help"
                        Executed="HelpCmd_Executed"/>
        <CommandBinding Command="{StaticResource ImportFilesCmd}"
                        CanExecute="CanAddFiles" Executed="ImportFilesCmd_Executed"/>
        <CommandBinding Command="{StaticResource NavToParentCmd}"
                        CanExecute="CanNavToParent" Executed="NavToParentCmd_Executed"/>
        <CommandBinding Command="{StaticResource NavToParentDirCmd}"
                        CanExecute="CanNavToParentDir" Executed="NavToParentDirCmd_Executed"/>
        <CommandBinding Command="{StaticResource NewDiskImageCmd}"
                        Executed="NewDiskImageCmd_Executed"/>
        <CommandBinding Command="{StaticResource NewFileArchiveCmd}"
                        Executed="NewFileArchiveCmd_Executed"/>
        <CommandBinding Command="Open"
                        Executed="OpenCmd_Executed"/>
        <CommandBinding Command="{StaticResource OpenPhysicalDriveCmd}"
                        Executed="OpenPhysicalDriveCmd_Executed"/>
        <CommandBinding Command="Paste"
                        CanExecute="CanPasteFiles" Executed="PasteCmd_Executed"/>
        <CommandBinding Command="{StaticResource RecentFileCmd}" x:Name="recentFileCmd"
                        Executed="RecentFileCmd_Executed"/>
        <CommandBinding Command="{StaticResource ReplacePartitionCmd}"
                        CanExecute="IsWritablePartitionSelected" Executed="ReplacePartitionCmd_Executed"/>
        <CommandBinding Command="{StaticResource ResetSortCmd}"
                        CanExecute="IsFileOpen" Executed="ResetSortCmd_Executed"/>
        <CommandBinding Command="{StaticResource SaveAsDiskImageCmd}"
                        CanExecute="IsChunkyDiskOrPartitionSelected" Executed="SaveAsDiskImageCmd_Executed"/>
        <CommandBinding Command="{StaticResource ScanForBadBlocksCmd}"
                        CanExecute="IsNibbleImageSelected" Executed="ScanForBadBlocksCmd_Executed"/>
        <CommandBinding Command="{StaticResource ScanForSubVolCmd}"
                        CanExecute="IsFileSystemSelected" Executed="ScanForSubVolCmd_Executed"/>
        <CommandBinding Command="SelectAll"
                        CanExecute="IsFileOpen" Executed="SelectAllCmd_Executed"/>
        <CommandBinding Command="{StaticResource ShowDirListCmd}"
                        CanExecute="IsFileOpen" Executed="ShowDirListCmd_Executed"/>
        <CommandBinding Command="{StaticResource ShowFullListCmd}"
                        CanExecute="IsFileOpen" Executed="ShowFullListCmd_Executed"/>
        <CommandBinding Command="{StaticResource ShowInfoCmd}"
                        CanExecute="IsFileOpen" Executed="ShowInfoCmd_Executed"/>
        <CommandBinding Command="{StaticResource TestFilesCmd}"
                        CanExecute="AreFileEntriesSelected" Executed="TestFilesCmd_Executed"/>
        <CommandBinding Command="{StaticResource ToggleInfoCmd}"
                        CanExecute="IsFileOpen" Executed="ToggleInfoCmd_Executed"/>
        <CommandBinding Command="{StaticResource ViewFilesCmd}"
                        CanExecute="AreFileEntriesSelected" Executed="ViewFilesCmd_Executed"/>

        <CommandBinding Command="{StaticResource Debug_BulkCompressTestCmd}"
                        Executed="Debug_BulkCompressTestCmd_Executed"/>
        <CommandBinding Command="{StaticResource Debug_DiskArcLibTestCmd}"
                        Executed="Debug_DiskArcLibTestCmd_Executed"/>
        <CommandBinding Command="{StaticResource Debug_FileConvLibTestCmd}"
                        Executed="Debug_FileConvLibTestCmd_Executed"/>
        <CommandBinding Command="{StaticResource Debug_ShowDebugLogCmd}"
                        Executed="Debug_ShowDebugLogCmd_Executed"/>
        <CommandBinding Command="{StaticResource Debug_ShowDropTargetCmd}"
                        Executed="Debug_ShowDropTargetCmd_Executed"/>
    </Window.CommandBindings>

    <DockPanel>
        <Menu Name="appMenu" DockPanel.Dock="Top">
            <!-- built-in commands are defined in WPF ApplicationCommands class -->
            <MenuItem Header="_File">
                <MenuItem Command="{StaticResource NewDiskImageCmd}"/>
                <MenuItem Command="{StaticResource NewFileArchiveCmd}"/>
                <MenuItem Command="Open" Header="_Open"/>
                <MenuItem Command="{StaticResource OpenPhysicalDriveCmd}"/>
                <MenuItem Command="{StaticResource CloseCmd}"/>
                <Separator/>
                <MenuItem Name="recentFilesMenu" Header="Recent Files" SubmenuOpened="RecentFilesMenu_SubmenuOpened">
                    <MenuItem Header="(none)"/>
                </MenuItem>
                <Separator/>
                <MenuItem Command="{StaticResource ExitCmd}" InputGestureText="Alt+F4"/>
            </MenuItem>
            <MenuItem Header="_Edit">
                <!--<MenuItem Command="Cut" Header="Cu_t"/>-->
                <MenuItem Command="Copy" Header="_Copy"/>
                <MenuItem Command="Paste" Header="_Paste"/>
                <Separator/>
                <MenuItem Command="Find" Header="_Find"/>
                <Separator/>
                <MenuItem Command="SelectAll" Header="Select _All"/>
                <Separator/>
                <MenuItem Command="{StaticResource EditAppSettingsCmd}"/>
            </MenuItem>
            <MenuItem Header="_Actions">
                <MenuItem Command="{StaticResource ViewFilesCmd}"/>
                <MenuItem Command="{StaticResource AddFilesCmd}"/>
                <MenuItem Command="{StaticResource ImportFilesCmd}"/>
                <MenuItem Command="{StaticResource ExtractFilesCmd}"/>
                <MenuItem Command="{StaticResource ExportFilesCmd}"/>
                <MenuItem Command="{StaticResource DeleteFilesCmd}"/>
                <MenuItem Command="{StaticResource TestFilesCmd}"/>
                <MenuItem Command="{StaticResource EditAttributesCmd}"/>
                <MenuItem Command="{StaticResource CreateDirectoryCmd}"/>
                <Separator/>
                <MenuItem Command="{StaticResource EditDirAttributesCmd}"/>
                <Separator/>
                <MenuItem Command="{StaticResource EditSectorsCmd}"/>
                <MenuItem Command="{StaticResource EditBlocksCmd}"/>
                <MenuItem Command="{StaticResource EditBlocksCPMCmd}"/>
                <MenuItem Command="{StaticResource SaveAsDiskImageCmd}"/>
                <MenuItem Command="{StaticResource ReplacePartitionCmd}"/>
                <MenuItem Command="{StaticResource ScanForBadBlocksCmd}"/>
                <Separator/>
                <MenuItem Command="{StaticResource ScanForSubVolCmd}"/>
                <MenuItem Command="{StaticResource DefragmentCmd}"/>
                <MenuItem Command="{StaticResource CloseSubTreeCmd}"/>
            </MenuItem>
            <MenuItem Header="_View">
                <MenuItem Command="{StaticResource ShowFullListCmd}"/>
                <MenuItem Command="{StaticResource ShowDirListCmd}"/>
                <MenuItem Command="{StaticResource ShowInfoCmd}"/>
            </MenuItem>
            <MenuItem Header="_Navigate">
                <MenuItem Command="{StaticResource NavToParentDirCmd}"/>
                <MenuItem Command="{StaticResource NavToParentCmd}"/>
            </MenuItem>
            <MenuItem Header="_Help">
                <MenuItem Command="Help"/>
                <MenuItem Command="{StaticResource AboutCmd}"/>
            </MenuItem>
            <MenuItem Header="_DEBUG" Name="DebugMenu" SubmenuOpened="DebugMenu_SubmenuOpened"
                      Visibility="{Binding ShowDebugMenu, Converter={StaticResource BoolToVis}}">
                <MenuItem Command="{StaticResource Debug_DiskArcLibTestCmd}"/>
                <MenuItem Command="{StaticResource Debug_FileConvLibTestCmd}"/>
                <MenuItem Command="{StaticResource Debug_BulkCompressTestCmd}"/>
                <Separator/>
                <MenuItem Name="debugShowDebugLogMenuItem"
                          Command="{StaticResource Debug_ShowDebugLogCmd}" IsCheckable="True"/>
                <MenuItem Name="debugShowDropTargetMenuItem"
                          Command="{StaticResource Debug_ShowDropTargetCmd}" IsCheckable="True"/>
            </MenuItem>
        </Menu>

        <ToolBarTray DockPanel.Dock="Top">
            <ToolBar Height="32">
                <Button Command="{StaticResource ShowFullListCmd}" IsEnabled="{Binding IsFullListEnabled}"
                        ToolTip="Show full file list"
                        BorderBrush="{Binding FullListBorderBrush}">
                    <ContentControl Template="{StaticResource icon_ListView}"/>
                </Button>
                <Button Command="{StaticResource ShowDirListCmd}" IsEnabled="{Binding IsDirListEnabled}"
                        ToolTip="Show contents of single directory"
                        BorderBrush="{Binding DirListBorderBrush}">
                    <ContentControl Template="{StaticResource icon_MeasureTree}"/>
                </Button>
                <Button Command="{StaticResource ShowInfoCmd}"
                        ToolTip="Show information (toggle: Ctrl+I)"
                        BorderBrush="{Binding InfoBorderBrush}">
                    <ContentControl Template="{StaticResource icon_StatusInformationOutlineNoColor}"/>
                </Button>

                <Separator/>

                <Button Command="{StaticResource ResetSortCmd}" IsEnabled="{Binding IsResetSortEnabled}"
                        ToolTip="Reset the sort order in the file list">
                    <ContentControl Template="{StaticResource icon_ClearSort}"/>
                </Button>
                <Button Command="{StaticResource NavToParentCmd}"
                        ToolTip="Move to parent">
                    <ContentControl Template="{StaticResource icon_Upload}"/>
                </Button>

                <Separator/>

                <TextBlock Text="Drag &amp; Copy mode:" Margin="4,5,0,0"
                           ToolTip="Configure behavior when dragging and copying files in or out"/>
                <RadioButton Content="Add/Extract" GroupName="aeix" Margin="4,0,0,0"
                             IsChecked="{Binding IsChecked_AddExtract}"
                             BorderBrush="{DynamicResource {x:Static SystemColors.MenuHighlightBrushKey}}"
                             ToolTip="When dragging or pasting files, perform add/extract operations."/>
                <RadioButton Content="Import/Export" GroupName="aeix" Margin="4,0,4,0"
                             IsChecked="{Binding IsChecked_ImportExport}"
                             BorderBrush="{DynamicResource {x:Static SystemColors.MenuHighlightBrushKey}}"
                             ToolTip="When dragging or pasting files, perform import/export operations."/>

                <Separator/>

                <Button Command="Help"
                        ToolTip="Help - open manual in browser (F1)">
                    <ContentControl Template="{StaticResource icon_F1Help}"/>
                </Button>
            </ToolBar>
        </ToolBarTray>

        <StatusBar Name="mainStatusBar" DockPanel.Dock="Bottom">
            <Grid Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor,
                        AncestorType={x:Type StatusBar}}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TextBlock Grid.Column="0" Text="Ready"/>
                <TextBlock Grid.Column="1" HorizontalAlignment="Center"
                           Text="{Binding CenterStatusText, FallbackValue=MESSAGE}"/>
                <!--<TextBlock Grid.Column="2" Margin="4,0,20,0"
                           Text="BOTTOM-RIGHT"/>-->
            </Grid>
        </StatusBar>



        <!--
        Main part of the window.  This must come last in the DockPanel, so that
        LastChildFill will expand this to fill all available space.
        -->
        <Grid Name="mainGrid" DockPanel.Dock="Top">

            <!-- Elements to show when no file is open ("launch" screen). -->
            <Grid Name="launchPanel"
                  Visibility="{Binding Path=LaunchPanelVisibility}" d:IsHidden="False"
                  Background="Transparent"
                  AllowDrop="True" Drop="LaunchPanel_Drop" DragOver="LaunchPanel_DragOver">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="4*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="4*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <StackPanel Grid.Row="0" Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Center">
                    <Grid Margin="8">
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <TextBlock Grid.Row="0" HorizontalAlignment="Center"
                                   Text="CiderPress II" FontSize="36" FontWeight="Bold"/>
                        <TextBlock Grid.Row="1" HorizontalAlignment="Center"
                                   Text="{Binding ProgramVersionString, StringFormat={}Version {0},
                                       RelativeSource={RelativeSource FindAncestor, AncestorType=Window},
                                       FallbackValue=Version X.Y.Z-alpha1}"
                                   FontSize="24"/>
                    </Grid>
                </StackPanel>

                <ScrollViewer Grid.Column="1" Grid.Row="1" VerticalScrollBarVisibility="Auto"
                              HorizontalAlignment="Center" VerticalAlignment="Center">
                    <StackPanel>
                        <Grid Width="300" Height="50" Margin="10">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="10"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Button Grid.Column="0" Content="Create new disk image"
                                    Command="{StaticResource NewDiskImageCmd}"/>
                            <Button Grid.Column="2" Content="Create new file archive"
                                    Command="{StaticResource NewFileArchiveCmd}"/>
                        </Grid>
                        <Button Content="Open file" Width="300" Height="50" Margin="10"
                                Command="Open"/>

                        <Button Width="300" Height="50" Margin="10"
                                Visibility="{Binding ShowRecentFile1, Converter={StaticResource BoolToVis}}"
                                ToolTip="{Binding RecentFilePath1}" ToolTipService.InitialShowDelay="750"
                                Command="{DynamicResource RecentFileCmd}" CommandParameter="0">
                            <Button.Content>
                                <StackPanel>
                                    <TextBlock HorizontalAlignment="Center">Recent file #1</TextBlock>
                                    <TextBlock Text="{Binding RecentFileName1, FallbackValue=RECENT 1}" HorizontalAlignment="Center"/>
                                </StackPanel>
                            </Button.Content>
                        </Button>
                        <Button Width="300" Height="50" Margin="10"
                                Visibility="{Binding ShowRecentFile2, Converter={StaticResource BoolToVis}}"
                                ToolTip="{Binding RecentFilePath2}" ToolTipService.InitialShowDelay="750"
                                Command="{DynamicResource RecentFileCmd}" CommandParameter="1">
                            <Button.Content>
                                <StackPanel>
                                    <TextBlock HorizontalAlignment="Center">Recent file #2</TextBlock>
                                    <TextBlock Text="{Binding RecentFileName2, FallbackValue=RECENT 2}" HorizontalAlignment="Center"/>
                                </StackPanel>
                            </Button.Content>
                        </Button>
                    </StackPanel>
                </ScrollViewer>
            </Grid>

            <!-- Active UI ("main" screen).  Three side-by-side panels, only the middle of which
            changes size when the main window is resized.  Making the resize work correctly
            requires that the controller set the initial left/right sizes explicitly (probably
            when restoring the previous configuration from the settings file). -->
            <Grid Name="mainTriptychPanel"
                  Visibility="{Binding Path=MainPanelVisibility}" d:IsHidden="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" MinWidth="100"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*" MinWidth="150"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <GridSplitter Grid.Column="1" Width="4" HorizontalAlignment="Center"/>

                <!-- left panel -->
                <Grid Name="leftPanel" Grid.Column="0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" MinHeight="100"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="2*" MinHeight="100"/>
                    </Grid.RowDefinitions>

                    <!-- top-left Archive Tree panel -->
                    <Grid Grid.Row="0" Margin="4,0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TextBlock Grid.Row="0" Text="Archive Contents" Margin="0,0,0,8"
                                   HorizontalAlignment="Center"/>
                        <TreeView Grid.Row="1" Name="archiveTree" BorderThickness="0"
                                  ItemsSource="{Binding ArchiveTreeRoot}"
                                  VirtualizingStackPanel.IsVirtualizing="True"
                                  VirtualizingStackPanel.VirtualizationMode="Recycling"
                                  SelectedItemChanged="ArchiveTree_SelectedItemChanged">
                            <TreeView.ItemTemplate>
                                <HierarchicalDataTemplate ItemsSource="{Binding Items}">
                                    <StackPanel Orientation="Horizontal">
                                        <!-- disable focus for all but one item, or up/down keys
                                        will have to be hit once for each element -->
                                        <ContentControl Template="{Binding StatusIcon}" Focusable="False"/>
                                        <ContentControl Template="{Binding ReadOnlyIcon}" Focusable="False"/>
                                        <TextBlock Text="{Binding TypeStr}" Focusable="False"
                                                   Style="{StaticResource archiveTreeTypeStyle}"/>
                                        <TextBlock Text="{Binding Name}" Padding="6,0,2,0"/>
                                    </StackPanel>
                                </HierarchicalDataTemplate>
                            </TreeView.ItemTemplate>
                            <TreeView.ItemContainerStyle>
                                <!-- tie TreeViewItem properties to data object; note style
                                trigger effects are "inherited" by children -->
                                <Style TargetType="{x:Type TreeViewItem}"
                                       BasedOn="{StaticResource wideTreeViewItemStyle}">
                                    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
                                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                                    <!--<Setter Property="FontWeight" Value="Normal"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="FontWeight" Value="Bold"/>
                                        </Trigger>
                                    </Style.Triggers>-->
                                </Style>
                            </TreeView.ItemContainerStyle>
                            <TreeView.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Command="{StaticResource EditSectorsCmd}"/>
                                    <MenuItem Command="{StaticResource EditBlocksCmd}"/>
                                    <MenuItem Command="{StaticResource EditBlocksCPMCmd}"/>
                                    <MenuItem Command="{StaticResource SaveAsDiskImageCmd}"/>
                                    <MenuItem Command="{StaticResource ReplacePartitionCmd}"/>
                                    <MenuItem Command="{StaticResource ScanForBadBlocksCmd}"/>
                                    <Separator/>
                                    <MenuItem Command="{StaticResource ScanForSubVolCmd}"/>
                                    <MenuItem Command="{StaticResource DefragmentCmd}"/>
                                    <MenuItem Command="{StaticResource CloseSubTreeCmd}"/>
                                </ContextMenu>
                            </TreeView.ContextMenu>
                        </TreeView>
                    </Grid>


                    <!-- bottom-left panel -->
                    <Grid Grid.Row="2" Margin="4,0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TextBlock Grid.Row="0" Text="Directories" Margin="0,0,0,8"
                                   HorizontalAlignment="Center"/>
                        <TreeView Grid.Row="1" Name="directoryTree" BorderThickness="0"
                                  ItemsSource="{Binding DirectoryTreeRoot}"
                                  VirtualizingStackPanel.IsVirtualizing="True"
                                  VirtualizingStackPanel.VirtualizationMode="Recycling"
                                  ScrollViewer.CanContentScroll="True"
                                  SelectedItemChanged="DirectoryTree_SelectedItemChanged"
                                  AllowDrop="True"
                                  Drop="DirectoryTree_Drop"
                                  DragOver="DirectoryTree_DragOver">
                            <TreeView.ItemTemplate>
                                <HierarchicalDataTemplate ItemsSource="{Binding Items}">
                                    <TextBlock Text="{Binding Name}" Padding="4,0,4,0"/>
                                </HierarchicalDataTemplate>
                            </TreeView.ItemTemplate>
                            <TreeView.ItemContainerStyle>
                                <!-- tie TreeViewItem properties to data object; note style
                                trigger effects are "inherited" by children -->
                                <Style TargetType="{x:Type TreeViewItem}"
                                       BasedOn="{StaticResource wideTreeViewItemStyle}">
                                    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
                                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                                    <!--<Setter Property="Background" Value="Blue"/>-->
                                </Style>
                            </TreeView.ItemContainerStyle>
                            <TreeView.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Command="{StaticResource EditDirAttributesCmd}"/>
                                    <MenuItem Command="Paste"/>
                                </ContextMenu>
                            </TreeView.ContextMenu>
                        </TreeView>
                    </Grid>

                    <GridSplitter Height="4" Grid.Row="1"
                                  HorizontalAlignment="Stretch" VerticalAlignment="Center"/>
                </Grid>

                <Grid Name="centerPanelGrid" Grid.Column="2">
                    <!-- center panel, option #1: file list -->
                    <DataGrid Name="fileListDataGrid" d:IsHidden="False"
                              Visibility="{Binding ShowCenterFileList, Converter={StaticResource BoolToVis}}"
                              ItemsSource="{Binding FileList}"
                              IsReadOnly="True"
                              SnapsToDevicePixels="True"
                              GridLinesVisibility="Vertical"
                              VerticalGridLinesBrush="#FF7F7F7F"
                              AutoGenerateColumns="False"
                              HeadersVisibility="Column"
                              CanUserReorderColumns="False"
                              VerticalScrollBarVisibility="Visible"
                              SelectionMode="Extended"
                              Background="{DynamicResource {x:Static SystemColors.WindowBrush}}"
                              EnableRowVirtualization="True"
                              VirtualizingStackPanel.VirtualizationMode="Recycling"
                              Sorting="FileList_Sorting"
                              MouseDoubleClick="FileList_MouseDoubleClick"
                              ContextMenuOpening="FileListContextMenu_ContextMenuOpening"
                              AllowDrop="True"
                              Drop="FileListDataGrid_Drop"
                              PreviewMouseLeftButtonDown="FileListDataGrid_PreviewMouseLeftButtonDown"
                              PreviewMouseMove="FileListDataGrid_PreviewMouseMove"
>
                              <!--FontFamily="{StaticResource GeneralMonoFont}"-->
                              <!-- use RowBackground to set area to right of last cell -->
                        <DataGrid.Resources>
                            <!-- make the no-focus color the same as the in-focus color -->
                            <!--<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}"
                                             Color="{x:Static SystemColors.HighlightColor}"/>
                            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}"
                                             Color="{x:Static SystemColors.HighlightTextColor}"/>-->

                            <!-- https://stackoverflow.com/a/22074985/294248 -->
                            <common:BindingProxy x:Key="proxy" Data="{Binding}"/>
                        </DataGrid.Resources>
                        <DataGrid.CommandBindings>
                            <!-- DataGrid provides its own behavior for Ctrl+C and Del; override -->
                            <CommandBinding Command="Copy"
                                            CanExecute="AreFileEntriesSelected" Executed="CopyCmd_Executed"/>
                            <CommandBinding Command="{StaticResource DeleteFilesCmd}"
                                            CanExecute="CanDeleteFiles" Executed="DeleteFilesCmd_Executed"/>
                        </DataGrid.CommandBindings>
                        <!-- If the columns change, update the custom sort function in FileListItem. -->
                        <DataGrid.Columns>
                            <DataGridTemplateColumn Header="?" Width="SizeToCells">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <ContentControl Template="{Binding StatusIcon}" Width="16"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="Filename" SortMemberPath="FileName" Width="240"
                                    Visibility="{Binding Data.ShowCol_FileName, Converter={StaticResource BoolToVis}, Source={StaticResource proxy}}">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding FileName}" TextTrimming="CharacterEllipsis"/>
                                                   <!--FontFamily="{x:Static SystemFonts.MessageFontFamily}"-->
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="Pathname" SortMemberPath="PathName" Width="300"
                                    Visibility="{Binding Data.ShowCol_PathName, Converter={StaticResource BoolToVis}, Source={StaticResource proxy}}">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding PathName}" TextTrimming="CharacterEllipsis"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Header="Type" Width="48" Binding="{Binding Type}"/>
                            <DataGridTextColumn Header="Auxtype" Width="56" Binding="{Binding AuxType}"/>
                            <DataGridTextColumn Header="Mod Date" Width="106" Binding="{Binding ModDate}"/>
                            <DataGridTextColumn Header="Data Len" Width="65" Binding="{Binding DataLength}"/>
                            <DataGridTextColumn Header="Raw Len" Width="65" Binding="{Binding RawDataLength}"
                                Visibility="{Binding Data.ShowCol_RawLen, Converter={StaticResource BoolToVis}, Source={StaticResource proxy}}"/>
                            <DataGridTextColumn Header="Format" Width="54" Binding="{Binding DataFormat}"
                                Visibility="{Binding Data.ShowCol_Format, Converter={StaticResource BoolToVis}, Source={StaticResource proxy}}"/>
                            <DataGridTextColumn Header="Rsrc Len" Width="65" Binding="{Binding RsrcLength}"
                                Visibility="{Binding Data.ShowCol_RsrcLen, Converter={StaticResource BoolToVis}, Source={StaticResource proxy}}"/>
                            <DataGridTextColumn Header="Format" Width="54" Binding="{Binding RsrcFormat}"
                                Visibility="{Binding Data.ShowCol_Format, Converter={StaticResource BoolToVis}, Source={StaticResource proxy}}"/>
                            <DataGridTextColumn Header="Total Size" Width="76" Binding="{Binding TotalSize}"
                                Visibility="{Binding Data.ShowCol_TotalSize, Converter={StaticResource BoolToVis}, Source={StaticResource proxy}}"/>
                            <DataGridTextColumn Header="Access" Width="50" Binding="{Binding Access}"/>
                        </DataGrid.Columns>
                        <DataGrid.ContextMenu>
                            <ContextMenu>
                                <MenuItem Command="{StaticResource ViewFilesCmd}"/>
                                <MenuItem Command="{StaticResource EditAttributesCmd}"/>
                                <MenuItem Command="{StaticResource ExtractFilesCmd}"/>
                                <MenuItem Command="{StaticResource ExportFilesCmd}"/>
                                <MenuItem Command="Copy"/>
                                <MenuItem Command="Paste"/>
                                <MenuItem Command="{StaticResource DeleteFilesCmd}"/>
                                <MenuItem Command="{StaticResource TestFilesCmd}"/>
                                <Separator/>
                                <MenuItem Command="{StaticResource AddFilesCmd}"/>
                                <MenuItem Command="{StaticResource ImportFilesCmd}"/>
                                <!--<MenuItem Command="Paste"/>-->
                                <MenuItem Command="{StaticResource CreateDirectoryCmd}"/>
                            </ContextMenu>
                        </DataGrid.ContextMenu>
                    </DataGrid>

                    <!-- center panel, option #2: information -->
                    <ScrollViewer d:IsHidden="True"
                        Visibility="{Binding ShowCenterInfoPanel, Converter={StaticResource BoolToVis}}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <!-- information on currently-selected archive tree item -->
                            <TextBlock Grid.Row="0" Text="{Binding CenterInfoText1}"
                                       FontSize="16"/>
                            <DataGrid Grid.Row="1" Name="centerInfoDataGrid" Margin="0,8,0,0"
                                      ItemsSource="{Binding CenterInfoList}"
                                      IsReadOnly="True"
                                      GridLinesVisibility="None"
                                      AutoGenerateColumns="False"
                                      HeadersVisibility="None"
                                      CanUserReorderColumns="False"
                                      CanUserSortColumns="False"
                                      HorizontalScrollBarVisibility="Disabled"
                                      VerticalScrollBarVisibility="Disabled"
                                      SelectionMode="Single">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Width="90" Header="Name" Binding="{Binding Name}"/>
                                    <DataGridTextColumn Width="*" Header="Value" Binding="{Binding Value}"/>
                                </DataGrid.Columns>
                            </DataGrid>

                            <GroupBox Grid.Row="2" Padding="2,4" Margin="0,8,0,0" Width="350"
                                      Header="Disk / Partition Utilities" HorizontalAlignment="Left"
                                      Visibility="{Binding ShowDiskUtilityButtons, Converter={StaticResource BoolToVis}}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="8"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Button Content="Edit Sectors" Grid.Row="0" Grid.Column="0"
                                            Command="{StaticResource EditSectorsCmd}"/>
                                    <Button Content="Edit Blocks" Grid.Row="1" Grid.Column="0" Margin="0,4,0,0"
                                            Command="{StaticResource EditBlocksCmd}"/>
                                    <Button Content="Edit Blocks (CP/M)" Grid.Row="2" Grid.Column="0" Margin="0,4,0,0"
                                            Command="{StaticResource EditBlocksCPMCmd}"/>

                                    <Button Content="Save As Disk Image" Grid.Row="0" Grid.Column="2"
                                            Command="{StaticResource SaveAsDiskImageCmd}"/>
                                    <Button Content="Replace Partition Contents" Grid.Row="1" Grid.Column="2" Margin="0,4,0,0"
                                            Command="{StaticResource ReplacePartitionCmd}"/>
                                    <Button Content="Scan For Bad Blocks" Grid.Row="2" Grid.Column="2" Margin="0,4,0,0"
                                            Command="{StaticResource ScanForBadBlocksCmd}"/>
                                </Grid>
                            </GroupBox>

                            <StackPanel Grid.Row="3" Margin="2,8,0,0"
                                        Visibility="{Binding ShowPartitionLayout, Converter={StaticResource BoolToVis}}">
                                <TextBlock Text="Partition Layout:"/>
                                <DataGrid Name="partitionLayoutDataGrid"
                                        ItemsSource="{Binding PartitionList}"
                                        MaxHeight="400"
                                        IsReadOnly="True"
                                        SnapsToDevicePixels="True"
                                        GridLinesVisibility="Vertical"
                                        VerticalGridLinesBrush="#FF7F7F7F"
                                        AutoGenerateColumns="False"
                                        HeadersVisibility="Column"
                                        CanUserReorderColumns="False"
                                        VirtualizingStackPanel.VirtualizationMode="Recycling"
                                        MouseDoubleClick="PartitionLayout_MouseDoubleClick">
                                    <DataGrid.Columns>
                                        <DataGridTextColumn Header="#" Width="30" Binding="{Binding Index}"/>
                                        <DataGridTextColumn Header="Start Block" Width="80" Binding="{Binding StartBlock}"/>
                                        <DataGridTextColumn Header="Block Count" Width="80" Binding="{Binding BlockCount}"/>
                                        <DataGridTextColumn Header="Name" Width="160" Binding="{Binding PartName}"/>
                                        <DataGridTextColumn Header="Type" Width="*" Binding="{Binding PartType}"/>
                                    </DataGrid.Columns>
                                </DataGrid>
                            </StackPanel>

                            <StackPanel Grid.Row="4" Margin="2,8,0,0"
                                        Visibility="{Binding ShowMetadata, Converter={StaticResource BoolToVis}}">
                                <TextBlock Text="Metadata:"/>
                                <DataGrid Name="metadataDataGrid" Margin="0,4,0,0"
                                        ItemsSource="{Binding MetadataList}"
                                        MaxHeight="400"
                                        IsReadOnly="True"
                                        SnapsToDevicePixels="True"
                                        GridLinesVisibility="Vertical"
                                        VerticalGridLinesBrush="#FF7F7F7F"
                                        AutoGenerateColumns="False"
                                        HeadersVisibility="Column"
                                        CanUserReorderColumns="False"
                                        VirtualizingStackPanel.VirtualizationMode="Recycling"
                                        MouseDoubleClick="MetadataList_MouseDoubleClick">
                                    <DataGrid.Columns>
                                        <DataGridTextColumn Header="Key" Width="150" Binding="{Binding Key}">
                                            <DataGridTextColumn.ElementStyle>
                                                <Style TargetType="TextBlock">
                                                    <!-- make the text gray if the item isn't editable, and it's not selected -->
                                                    <Style.Triggers>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridCell}}, Path=IsSelected}" Value="False"/>
                                                                <Condition Binding="{Binding CanEdit}" Value="False"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                                        </MultiDataTrigger>
                                                    </Style.Triggers>
                                                    <Setter Property="ToolTip" Value="{Binding Description}"/>
                                                </Style>
                                            </DataGridTextColumn.ElementStyle>
                                        </DataGridTextColumn>
                                        <DataGridTextColumn Header="Value" Width="400" Binding="{Binding Value}">
                                            <DataGridTextColumn.ElementStyle>
                                                <Style TargetType="TextBlock">
                                                    <Setter Property="ToolTip" Value="{Binding ValueSyntax}"/>
                                                </Style>
                                            </DataGridTextColumn.ElementStyle>
                                        </DataGridTextColumn>
                                    </DataGrid.Columns>
                                    <!--<DataGrid.RowStyle>
                                        <Style TargetType="DataGridRow">
                                            <Setter Property="ToolTip" Value="{Binding Description}"/>
                                        </Style>
                                    </DataGrid.RowStyle>-->
                                </DataGrid>
                                <Button Margin="0,8,0,0" Width="120" Content="Add New Entry"
                                        IsEnabled="{Binding CanAddMetadataEntry}"
                                        Click="Metadata_AddEntryButtonClick"/>
                            </StackPanel>

                            <StackPanel Grid.Row="5" Margin="2,8,0,0"
                                        Visibility="{Binding ShowNotes, Converter={StaticResource BoolToVis}}">
                                <TextBlock Text="Notes:"/>
                                <DataGrid Name="notesDataGrid"
                                        ItemsSource="{Binding NotesList}"
                                        MaxHeight="400"
                                        IsReadOnly="True"
                                        SnapsToDevicePixels="True"
                                        GridLinesVisibility="Vertical"
                                        VerticalGridLinesBrush="#FF7F7F7F"
                                        AutoGenerateColumns="False"
                                        HeadersVisibility="Column"
                                        CanUserReorderColumns="False"
                                        VirtualizingStackPanel.VirtualizationMode="Recycling">
                                    <DataGrid.Columns>
                                        <DataGridTextColumn Header="Prio" Width="32" Binding="{Binding TypeChar}"/>
                                        <DataGridTextColumn Header="Message" Width="*" Binding="{Binding Text}"/>
                                    </DataGrid.Columns>
                                </DataGrid>
                            </StackPanel>
                        </Grid>
                    </ScrollViewer>

                    <!-- place-holder for semi-floating dialog -->
                    <Border Width="150" Height="70" Visibility="Collapsed"
                            HorizontalAlignment="Right" VerticalAlignment="Top">
                        <Button Content="Insert FIND dialog here"/>
                    </Border>

                    <!-- fade-out notification "toast", used when events complete -->
                    <!-- This must be the last thing defined in the Grid so that it appears on
                    top of other elements, but doing so means that it will consume clicks unless
                    we set IsHitTestVisible to False. -->
                    <Grid Name="toastMessage" Opacity="0" Visibility="Visible" IsHitTestVisible="False">
                        <Border Name="toastBorder" Width="200" Height="40" Margin="0,0,0,20"
                                BorderBrush="Blue" BorderThickness="0,2,0,2"
                                Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                                HorizontalAlignment="Center" VerticalAlignment="Bottom">
                            <TextBlock Name="toastTextBlock" Margin="4,0"
                                       VerticalAlignment="Center" HorizontalAlignment="Center"
                                       TextWrapping="Wrap" Text="This is a test of the emergency opacity system"/>
                        </Border>
                    </Grid>
                </Grid>

                <!-- right panel -->
                <Border Grid.Column="4" BorderThickness="1" BorderBrush="LightGray" Margin="2,0,0,0">
                    <DockPanel>
                        <Button DockPanel.Dock="Bottom" Content="Show/Hide Settings" Width="140" Margin="2,0,0,2"
                            HorizontalAlignment="Center" Click="ShowHideOptionsButton_Click">
                            <Button.LayoutTransform>
                                <RotateTransform Angle="{Binding ShowHideRotation}"/>
                            </Button.LayoutTransform>
                        </Button>
                        <Grid Name="optionsPanel"  DockPanel.Dock="Top" Width="200"
                              Visibility="{Binding ShowOptionsPanel, Converter={StaticResource BoolToVis}}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto" MinHeight="120"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto" MinHeight="120"/>
                            </Grid.RowDefinitions>

                            <StackPanel Grid.Row="0"
                                        Background="{DynamicResource {x:Static SystemColors.GradientInactiveCaptionBrushKey}}">
                                <TextBlock Text="Add/Import Options" HorizontalAlignment="Center"/>
                            </StackPanel>

                            <StackPanel Grid.Row="1" Margin="2,6,2,0">
                                <CheckBox Content="Recurse Into Directories"
                                          IsChecked="{Binding IsChecked_AddRecurse}"/>
                                <CheckBox Content="Use Compression"
                                          IsChecked="{Binding IsChecked_AddCompress}"/>
                                <CheckBox Content="Strip Paths"
                                          IsChecked="{Binding IsChecked_AddStripPaths}"/>
                                <CheckBox Content="Raw (for DOS 3.x)"
                                          IsChecked="{Binding IsChecked_AddRaw}"/>

                                <GroupBox Header="Preservation Handling" Padding="0,2,0,0">
                                    <StackPanel>
                                        <CheckBox Content="AppleSingle"
                                                  IsChecked="{Binding IsChecked_AddPreserveAS}"/>
                                        <CheckBox Name="addPreserveADF" Content="AppleDouble"
                                                  IsChecked="{Binding IsChecked_AddPreserveADF}"/>
                                        <CheckBox Name="addPreserveNAPS" Content="NAPS"
                                                  IsChecked="{Binding IsChecked_AddPreserveNAPS}"/>
                                    </StackPanel>
                                </GroupBox>

                                <GroupBox Header="Import Configuration" Padding="0,2,0,0">
                                    <StackPanel>
                                        <CheckBox Content="Strip Redundant Extensions" Margin="0,2,0,0"
                                              IsChecked="{Binding IsChecked_AddStripExt}"/>
                                        <TextBlock Text="Conversion mode:" Margin="0,4,0,0"/>
                                        <ComboBox Margin="0,4,0,0" Name="importCfgCombo"
                                                  ItemsSource="{Binding ImportConverters}"
                                                  DisplayMemberPath="Label"/>
                                        <Button Margin="0,4,0,0" Width="140"
                                                Content="Conversion Settings"
                                                Click="ConfigureImportSettings_Click"/>
                                    </StackPanel>
                                </GroupBox>
                            </StackPanel>

                            <StackPanel Grid.Row="2" Margin="0,20,0,0"
                                        Background="{DynamicResource {x:Static SystemColors.GradientInactiveCaptionBrushKey}}">
                                <TextBlock Text="Extract/Export Options" HorizontalAlignment="Center"/>
                            </StackPanel>

                            <StackPanel Grid.Row="3" Margin="2,6,2,0">
                                <CheckBox Content="Strip Paths"
                                          IsChecked="{Binding IsChecked_ExtStripPaths}"/>
                                <CheckBox Content="Raw (for DOS 3.x)"
                                          IsChecked="{Binding IsChecked_ExtRaw}"/>

                                <GroupBox Header="Preservation Mode" Padding="0,2,0,0">
                                    <StackPanel>
                                        <RadioButton Content="None" GroupName="ExtPreserve"
                                                     IsChecked="{Binding IsChecked_ExtPreserveNone}"/>
                                        <RadioButton Content="AppleSingle" GroupName="ExtPreserve"
                                                     IsChecked="{Binding IsChecked_ExtPreserveAS}"/>
                                        <RadioButton Content="AppleDouble" GroupName="ExtPreserve"
                                                     IsChecked="{Binding IsChecked_ExtPreserveADF}"/>
                                        <RadioButton Content="NAPS" GroupName="ExtPreserve"
                                                     IsChecked="{Binding IsChecked_ExtPreserveNAPS}"/>
                                    </StackPanel>
                                </GroupBox>

                                <GroupBox Header="Export Configuration" Padding="0,2,0,0">
                                    <StackPanel>
                                        <TextBlock Text="Conversion mode:"/>
                                        <RadioButton Content="Best (automatic)" GroupName="ExportCfg" Margin="0,4,0,0"
                                                     IsChecked="{Binding IsExportBestChecked}"/>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <RadioButton Grid.Column="0" Margin="0,8,0,0"
                                                         Content="" GroupName="ExportCfg"
                                                         IsChecked="{Binding IsExportComboChecked}"/>
                                            <ComboBox Grid.Column="1" Name="exportCfgCombo" Margin="0,4,0,0"
                                                      ItemsSource="{Binding ExportConverters}"
                                                      DisplayMemberPath="Label"/>
                                        </Grid>
                                        <Button Margin="0,4,0,0" Width="140"
                                                Content="Conversion Settings"
                                                Click="ConfigureExportSettings_Click"/>
                                    </StackPanel>
                                </GroupBox>
                            </StackPanel>

                        </Grid>
                    </DockPanel>
                </Border>

            </Grid>     <!-- end of main panel -->
        </Grid>     <!-- end of launch/main -->

    </DockPanel>
</Window>
